import requests
import json
import logging
from decouple import config

logger = logging.getLogger(__name__)


class SimpleAIAssistant:
    """–ü—Ä–æ—Å—Ç–æ–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —á–µ—Ä–µ–∑ API"""

    def __init__(self):
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º GROQ_API_KEY, –ø–æ—Ç–æ–º OPENAI_API_KEY –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.api_key = config('GROQ_API_KEY', default=config('OPENAI_API_KEY', default=None))
        self.available = self.api_key is not None

    def is_available(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ò–ò"""
        return self.available

    def chat(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò"""
        if not self.is_available():
            return "–ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ GROQ_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."

        try:
            # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ API –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            responses = {
                '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? üëã',
                '–∫–∞–∫ –¥–µ–ª–∞': '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫ —É –≤–∞—Å?',
                '—á—Ç–æ —É–º–µ–µ—à—å': '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ–≥–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –æ–±—â–∞—Ç—å—Å—è! –†–∞–±–æ—Ç–∞—é –Ω–∞ Llama 3.1 ü¶ô',
                '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å! üòä',
                '–ø–æ–∫–∞': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üëã'
            }

            message_lower = message.lower().strip()

            # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for key, response in responses.items():
                if key in message_lower:
                    return response

            # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
            if not self.api_key:
                return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: '{message}'. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω API –∫–ª—é—á."

            # üîÑ –ó–î–ï–°–¨ –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –í—ã–∑—ã–≤–∞–µ–º Groq API –≤–º–µ—Å—Ç–æ OpenAI
            return self._call_groq_api(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ —Å –ò–ò: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    def _call_groq_api(self, message):
        """üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –í—ã–∑–æ–≤ Groq API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ!)"""
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Groq API: {message[:50]}...")

            # üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï 1: –ù–æ–≤—ã–µ headers –¥–ª—è Groq
            headers = {
                'Authorization': f'Bearer {self.api_key}',  # –¢–µ–ø–µ—Ä—å GROQ_API_KEY
                'Content-Type': 'application/json'
            }

            # üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            data = {
                'model': 'llama-3.1-8b-instant',  # –í–º–µ—Å—Ç–æ gpt-3.5-turbo
                'messages': [
                    {
                        'role': 'system',
                        'content': '–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.'
                    },
                    {
                        'role': 'user',
                        'content': message
                    }
                ],
                'max_tokens': 150,
                'temperature': 0.7
            }

            # üîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ù–æ–≤—ã–π URL –¥–ª—è Groq
            response = requests.post(
                'https://api.groq.com/openai/v1/chat/completions',  # –í–º–µ—Å—Ç–æ OpenAI URL
                headers=headers,
                json=data,
                timeout=30
            )

            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Groq: —Å—Ç–∞—Ç—É—Å {response.status_code}")

            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content'].strip()
            else:
                logger.error(f"Groq API error: {response.status_code} - {response.text}")
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò —Å–µ—Ä–≤–∏—Å–∞."

        except requests.exceptions.Timeout:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Groq API: {e}")
            return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò —Å–µ—Ä–≤–∏—Å—É."

    # üóëÔ∏è –≠—Ç–æ—Ç —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
    def _call_openai_api(self, message):
        """–°–¢–ê–†–´–ô –ú–ï–¢–û–î: –í—ã–∑–æ–≤ OpenAI API (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)"""
        # ... —Å—Ç–∞—Ä—ã–π –∫–æ–¥ OpenAI ...
        pass


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_ai_assistant = None


def get_ai_assistant():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    global _ai_assistant
    if _ai_assistant is None:
        _ai_assistant = SimpleAIAssistant()
    return _ai_assistant